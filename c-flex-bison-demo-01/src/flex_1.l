%{

/*
这里的部分会被直接拷贝到生成的 .c 文件的开始部分，在这里可以包含需要使用的头文件，如 stdio.h
*/

#include <stdio.h>
%}

/* 下面这个 %% 就表示定义段结束了，规则段开始了 */
%%

/* 规则段开始了，下面定义了四条规则，前面的部分就是模式，处于一行的开始位置，后面的部分就是动作，也就是，输入中匹配到了这个模式的时候，对应的进行什么动作，就像你蹲在战壕里，前面出来一个人，你通过匹配知道是敌人，你就开枪一样。第一个模式也就是匹配连续的一个到多个字符，匹配到之后就将其打印出来。注意到 yytext，在输入匹配到该模式的时候，匹配的部分就存储在这个 yytext 里面啦！这里把它作为字符串直接输出就可以了；第二条规则的模式部分，就是匹配连续的一个或者多个数字，匹配到了之后，也是以字符串的形式输出（对于输入，就是一连串的字符，什么转换之类的，就得我们自己操心了）；第三条规则的模式部分，就是匹配一个换行符了，并且匹配到之后就打印一个新行的信息；第四条规则的模式部分，是一个点。正则表达式里面这个也就是匹配任何出了 \n 之外的字符。因此，下面的游戏规则就是，匹配到英语单词（当然，不一定是正确的单词，比如 niubi，暂时先不计较这个），则将该单词输出，匹配到连续数字，将其输出；匹配到换行符，打印一条信息；匹配到任何其他的字符，则直接忽略（{} 也就是动作是空的，就是什么都不做了。什么都不做了那程序该干啥呢？当然是继续识别后面的输入啦！） */

[a-zA-Z]+		{ printf(“get word: %s”, yytext); }
[0-9]+			{printf(“get number:%s”, yytext); }
\n          {printf(“New line\n”); }
.           { }
%%

/* 规则段之后就是用户子程序段了。这里现在我们就空着，先重点关注一下规则段的再说。其实上面这第二个%% 也是可以去掉的哦！不妨动手试试吧！ */